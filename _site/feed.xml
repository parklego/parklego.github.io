<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-16T20:40:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">parklego dev log</title><subtitle>Build Jekyll site with the GitBook style.
</subtitle><author><name>parklego</name></author><entry><title type="html">개발일지</title><link href="http://localhost:4000/til/think.html" rel="alternate" type="text/html" title="개발일지" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/think</id><content type="html" xml:base="http://localhost:4000/til/think.html"><![CDATA[<h2 id="라이트다크-모드">라이트/다크 모드</h2>

<p>최근에 create-react-app을 더 이상 사용하지 않는다는 소식을 들었다. 그래서 다음에는 vite를 이용해보고자 했는데 드디어 사용해보게 되었다.</p>

<p>새로 해보는 만큼 라이브러리도 써보지 않은 다양한 것을 사용해보고 싶었다. 그래서 shadcn도 설정하였다.</p>

<p>설정하는 단계가 조금 귀찮다. 그리고 문서가 자세하지가 않다. 그렇지만 이쁘다.</p>

<p>그리고 상태관리로는 최근에 가장 가파른 상승세를 타고 있는 zustand를 사용해보기로 했다.</p>

<p>처음에 해보고 싶었던 것은 라이트/다크모드를 설정해보는 기능을 구현해보고 싶었다.</p>

<p>localstorage를 이용해서 구현할 것이고, styled-component의 <code class="language-plaintext highlighter-rouge">themeProvider</code>로 구현하고자 하였다.</p>

<p>그런데 zustand에 localstorage가 있었다. 그래서 persist middleware와 함께 이용하기로 했다.</p>

<p>shadcn의 switch 컴포넌트를 이용해 토글기능으로 다크모드를 on/off 하였다. 그러다 ux측면도 고려해보게 되었다.</p>

<p>내가 주로 검색하는데 사용하는 phind와 shadcn의 다크모드 기능을 살펴보았다.</p>

<ul>
  <li>phind의 경우에는 처음에 os의 테마를 바탕으로 사이트를 변경해준다. 이때 localstorage에는 테마의 키-벨류가 없다. 그리고 유저가 테마를 건드리면 그때 키-벨류값이 생기고 이에따라 테마가 변경된다.</li>
  <li>shadcn의 경우 처음부터 라이트/다크/시스템 이렇게 선택할 수 있게 설정이 되어 있다.</li>
</ul>

<p>다크모드 구현이 단순한 기능인줄 알았는데 생각보다 다양한 방법도 있다는 것을 알았다. UX도 생각보다 빠르게 발전하고 있구나 싶었다.</p>

<p>os 테마변경에 따른 실시간 변경을 위해 커스텀훅을 만들어서 구현하였다.</p>

<h2 id="인터렉티브">인터렉티브</h2>

<p>프론트엔드 개발자라면 인터렉티브한 웹사이트를 보게되면 이벤트를 발생시켜보면서 어떻게 구현했나? 궁금하고 신기해 한다. 간혹 채용 공고의 우대사항에서도 three.js 사용해본 경험이라던지 R3F에 대한 내용이 더러 있다.</p>

<p>언젠가는 애플과 같은 (스크롤을 감지하여 배경화면을 랜더링) 이쁘고 깔끔한 개발을 해보고 싶다는 생각이 있었는데 최근에 다양한 기술로 가볍게 만들어본 프로젝트의 배경이 생각이 났다. 그래서 three.js를 찍먹이나 해보자는 생각으로 시도를 해보았다.</p>

<p>아래는 우와! 소리가 절로 나올만한 사이트들이다.</p>

<blockquote>
  <p>드래그를 하면 마우스를 추적하여 꽃이 피어오른다.</p>

  <p><a href="https://2019.makemepulse.com/">Nomadic Tribe — makemepulse</a></p>
</blockquote>

<blockquote>
  <p>30종류의 동물들이 조각형태로 변환되는 것을 보여준다.</p>

  <p><a href="http://species-in-pieces.com/#">In Pieces – 30 Species, 30 Pieces. 1 Fragmented Survival.</a></p>
</blockquote>

<p><br /></p>

<p>그 외에 해외에서 다양한 인터렉티브한 사이트들을 한눈에 볼 수 있는 사이트이다. UI도 깔끔하고, 다양한 아이디어들을 볼 수 있어서 좋은 것 같다.</p>

<ol>
  <li>
    <p><a href="https://www.cssdesignawards.com/">CSS Design Awards - Website Awards - Best Web Design Inspiration - CSS Awards</a></p>
  </li>
  <li>
    <p><a href="https://thefwa.com/awards/page/1/">https://thefwa.com/awards/page/1/</a></p>
  </li>
</ol>

<p><br /></p>

<p>찍먹이기에 나는 모델이 마우스 커서를 주시하여 움직이는 정도로만 구현해보고자 했다.</p>

<p>어느정도의 개념적인 부분은 아래에 블로그를 참고 하였고, 내가 구현한 코드를 설명하자면</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">...</span>
<span class="kd">const</span> <span class="nx">sensitivity</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>

<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">handleMouseMove</span> <span class="o">=</span> <span class="p">(</span><span class="na">event</span><span class="p">:</span> <span class="nx">MouseEvent</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setMousePosition</span><span class="p">({</span>
        <span class="na">x</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clientY</span> <span class="o">/</span> <span class="nx">sensitivity</span><span class="p">,</span>
        <span class="na">y</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">clientX</span> <span class="o">/</span> <span class="nx">sensitivity</span><span class="p">,</span>
      <span class="p">});</span>
    <span class="p">};</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">mousemove</span><span class="dl">"</span><span class="p">,</span> <span class="nx">handleMouseMove</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nb">window</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">mousemove</span><span class="dl">"</span><span class="p">,</span> <span class="nx">handleMouseMove</span><span class="p">);</span>
    <span class="p">};</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="nx">useFrame</span><span class="p">((</span><span class="nx">state</span><span class="p">,</span> <span class="nx">delta</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">meshRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">mousePosition</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span>
    <span class="nx">meshRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nx">mousePosition</span><span class="p">.</span><span class="nx">y</span> <span class="o">-</span> <span class="mi">1000</span><span class="p">;</span>
  <span class="p">});</span>

<span class="p">...</span>

</code></pre></div></div>

<p>@react-three/fiber에서 제공하는 useFrame을 사용하여 매 프레임마다 rotation되게 하면 모델을 움직일 수 있게 할 수 있을 것 같았다.</p>

<p>그러기 위해서 마우스의 움직임을 추적해야하는데 이를 위해 handleMouseMove 라는 함수를 만들어 주었다. (useFrame은 애니메이션을 처리하거나 실시간으로 변화하는 값을 관리할 때 주로 사용한다.)</p>

<p>마우스를 좌,우(x축)로 움직였을 때 모델이 위아래로 움직였고 상,하로 움직였을 때 모델이 좌우로 움직였다.</p>

<p>그래서 포지션을 반대로 해주면 될 것 같았다. 그러나 너무 빠르게 움직여서 미친듯이 움직였다. 그래서 민감도를 주기 위하여 그 값을 큰 값으로 나누어서 값의 크기를 줄였더니 원하는대로 움직였다.</p>

<p>하지만 내가 개발한 페이지에서 모델은 오른쪽에 배치를 했기 때문에 가용범위를 고려하여 실제 회전을 할 때에 y값에 -값을 추가해보면서 자연스러운 값을 찾았다.</p>

<p>Canvas 위에 Mesh라는 Object를 얹는다는 느낌으로 이해하면 된다. 3D 모델은 아래의 사이트에서 찾아서 불러왔다.</p>

<p><a href="https://sketchfab.com/feed">https://sketchfab.com/feed</a></p>

<h2 id="jwt-적용기">JWT 적용기</h2>

<blockquote>
  <p>사전 준비</p>
</blockquote>

<ol>
  <li>cookie parser</li>
  <li>cors
    <ul>
      <li>origin 설정</li>
      <li>credentials true</li>
    </ul>
  </li>
</ol>

<p><br /></p>

<blockquote>
  <p>JWT 로직</p>
</blockquote>

<ul>
  <li>
    <p>로그인 시 인증 서버로부터 access token, refresh token을 쿠키에 넣어서 보내준다.</p>

    <p>(중요) refresh token은 httpOnly / secure / SameSite 옵션을 준다.</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="nl">maxAge</span><span class="p">:</span> <span class="mi">300000</span><span class="p">,</span> <span class="c1">// 5m</span>
  <span class="nx">httpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nx">secure</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="nx">sameSite</span><span class="p">:</span> <span class="dl">"</span><span class="s2">strict</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>인증 체계를 다음과 같이 만든다.</p>

    <ol>
      <li>
        <p>쿠키에 엑세스토큰이 있는지 확인한다.</p>

        <ul>
          <li>엑세스 토큰이 없다면 엑세스토큰을 재발급 절차를 받는다. (2번으로 이동)</li>
          <li>엑세스 토큰 있다면 엑세스토큰을 확인 절차를 밟는다. (종료)</li>
        </ul>
      </li>
      <li>
        <p>재발급을 받는 절차에서 리프레시 토큰을 확인한다.</p>
        <ul>
          <li>리프레시 토큰이 없거나 유효하지 않으면 로그인 페이지로 이동시킨다. (종료)</li>
          <li>리프레시 토큰이 유효하다면 새로운 엑세스토큰을 발급해준다.</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<p><br />
<br /></p>

<p>token의 저장 위치에 관하여는 언제나 말이 많았다. 예전에 나는 localstorage에 저장해서 이번에는 cookie에 한 번 담아 본 것이다.</p>

<p>리액트같은 경우에 access token을 private 변수로 저장해놓고 사용해도 된다고 한다. 왜냐하면 어차피 refresh token이 있으니까 재발급받으면 된다는 의미인 것 같았다.</p>

<p>refresh token을 일회성으로 사용하는 RTR (Refresh Token Rotation)이라는 방법도 있다.</p>

<p>그러고 보니 access token을 헤더에 실어 보낼 때 어떻게 했더라 싶어서 다시 찾아봤다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">accessToken</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="dl">"</span><span class="s2">accessToken</span><span class="dl">"</span><span class="p">)</span> <span class="o">||</span> <span class="dl">""</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">requestData</span> <span class="o">=</span> <span class="p">{};</span>

<span class="nx">axios</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:8000/like</span><span class="dl">"</span><span class="p">,</span> <span class="nx">requestData</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">Authorization</span><span class="p">:</span> <span class="s2">`Bearer </span><span class="p">${</span><span class="nx">accessToken</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>
</code></pre></div></div>

<p>아. 그리고 Bearer를 항상 붙였었는데 이건 일종의 약속이라서 그렇다고 한다.</p>

<p><code class="language-plaintext highlighter-rouge">Authorization: &lt;type&gt; &lt;credentials&gt;</code></p>

<p>Bearer 타입은 JWT 혹은 OAuth에 대한 토큰을 사용한다는 뜻.</p>

<h2 id="oauth-20으로-youtube-api-호출하기">OAuth 2.0으로 Youtube API 호출하기</h2>

<p>처음의 나의 로직은 이러했다.</p>

<ol>
  <li>next-auth를 이용하여 소셜로그인을 한다.</li>
  <li>로그인 도중 oAuth 인증을 통해서 자격증명을 사용자에게 요청한다.</li>
  <li>자격증명에 성공하면 Youtube API 접근 권한에 대한 access token을 획득한다.</li>
  <li>클라이언트에서 Youtube API를 호출할때 header에 access token을 실어서 넘긴다.</li>
</ol>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app/api/auth/[...nextauth]/route.ts</span>

<span class="k">import</span> <span class="nx">NextAuth</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next-auth</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GoogleProvider</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next-auth/providers/google</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="nx">NextAuth</span><span class="p">({</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">GoogleProvider</span><span class="p">({</span>
      <span class="na">clientId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GOOGLE_CLIENT_ID</span> <span class="o">??</span> <span class="dl">""</span><span class="p">,</span>
      <span class="na">clientSecret</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GOOGLE_CLIENT_SECRET</span> <span class="o">??</span> <span class="dl">""</span><span class="p">,</span>
      <span class="na">authorization</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">params</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">scope</span><span class="p">:</span>
            <span class="dl">"</span><span class="s2">openid email profile https://www.googleapis.com/auth/youtube.readonly</span><span class="dl">"</span><span class="p">,</span>
          <span class="na">prompt</span><span class="p">:</span> <span class="dl">"</span><span class="s2">consent</span><span class="dl">"</span><span class="p">,</span>
          <span class="na">access_type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">offline</span><span class="dl">"</span><span class="p">,</span>
          <span class="na">response_type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">code</span><span class="dl">"</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">},</span>
    <span class="p">}),</span>
  <span class="p">],</span>
  <span class="na">pages</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">error</span><span class="p">:</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">callbacks</span><span class="p">:</span> <span class="p">{</span>
    <span class="k">async</span> <span class="nx">jwt</span><span class="p">({</span> <span class="nx">token</span><span class="p">,</span> <span class="nx">account</span> <span class="p">})</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">account</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">token</span><span class="p">.</span><span class="nx">accessToken</span> <span class="o">=</span> <span class="nx">account</span><span class="p">.</span><span class="nx">access_token</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">token</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="k">async</span> <span class="nx">session</span><span class="p">({</span> <span class="nx">session</span><span class="p">,</span> <span class="nx">token</span><span class="p">,</span> <span class="nx">user</span> <span class="p">})</span> <span class="p">{</span>
      <span class="nx">session</span><span class="p">.</span><span class="nx">accessToken</span> <span class="o">=</span> <span class="nx">token</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">;</span>

      <span class="k">return</span> <span class="nx">session</span><span class="p">;</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="k">export</span> <span class="p">{</span> <span class="nx">handler</span> <span class="k">as</span> <span class="nx">GET</span><span class="p">,</span> <span class="nx">handler</span> <span class="k">as</span> <span class="nx">POST</span> <span class="p">};</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">getChannel</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">keyword</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span>
    <span class="s2">`https://www.googleapis.com/youtube/v3/search?part=snippet&amp;type=channel&amp;q=</span><span class="p">${</span><span class="nx">keyword</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
    <span class="p">{</span>
      <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">Authorization</span><span class="p">:</span> <span class="s2">`Bearer </span><span class="p">${</span><span class="nx">session</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">}</span>
  <span class="p">);</span>

  <span class="k">return</span> <span class="nx">data</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
<span class="p">};</span>
</code></pre></div></div>

<p>테스트를 해보니 내가 구독한 정보에 대해 잘 불러왔다.</p>

<p>하지만, 문제점은 프로덕션 단계에서 이를 활용하려면 아래와 같이 조건들이 필요했다.</p>

<p><img src="../assets/oAuth.png" alt="Untitled" /></p>

<p>저러한 조건을 다 채우더라도 승인될지의 의문과 구독한 채널의 카테고리를 필터링해서 불러오는 API도 제공하지 않는다.</p>

<p>Next-auth 자체가 oAuth를 사용하기때문에 youtube API와 같은 민감한 데이터로의 접근은 프로덕션단계에서만 원활하게 작동한다.</p>

<p>테스트를 하더라도 인증된 이메일만 접근 가능하다.</p>

<p>이는 포기하고 API key로 Youtube API를 호출하는 방식으로 바꿔야 할 듯 하다.</p>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[라이트/다크 모드]]></summary></entry><entry><title type="html">Architecture</title><link href="http://localhost:4000/til/architecture.html" rel="alternate" type="text/html" title="Architecture" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/architecture</id><content type="html" xml:base="http://localhost:4000/til/architecture.html"><![CDATA[<h2 id="모놀리식-vs-멀티레포-vs-모노레포">모놀리식 vs 멀티레포 vs 모노레포</h2>

<h3 id="모놀리식-아키텍쳐">모놀리식 아키텍쳐</h3>

<p>애플리케이션의 모든 구성 요소가 한 프로젝트에 통합되어 있는 형태를 말한다.</p>

<p>장점:</p>

<ol>
  <li>단일 애플리케이션으로 구성되어 있으므로 배포 프로세스가 단순</li>
  <li>모든 코드가 하나의 코드베이스에 있으므로 전체 시스템의 상호작용을 이해하기 쉽다.</li>
  <li>코드를 빠르게 수정하고 테스트할 수 있다.</li>
  <li>초기에는 적은 코드베이스로 빠르게 시작할 수 있다.</li>
</ol>

<p>단점:</p>

<ol>
  <li>큰 규모의 애플리케이션에서는 모놀리식 아키텍처가 더 이상 확장하기 어려울 수 있다.</li>
  <li>작은 변경 사항을 배포할 때 전체 애플리케이션을 다시 배포해야 할 수 있다.</li>
  <li>코드베이스가 커질수록 기술적 부채가 쌓이는 경향이 있습니다.</li>
  <li>단위 테스트와 통합 테스트를 관리하기 어려울 수 있다.</li>
</ol>

<p>언제 사용?</p>

<ol>
  <li>작은 및 중소규모 애플리케이션 또는 프로토타입 개발에 적합합니다.</li>
  <li>초기에 빠르게 개발하고 배포하려는 경우에 사용할 수 있습니다.</li>
  <li>개발 및 배포 프로세스를 단순화하고자 하는 경우에 적합합니다.</li>
</ol>

<h3 id="마이크로서비스-아키텍쳐msa">마이크로서비스 아키텍쳐(MSA)</h3>

<p>마이크로서비스 아키텍쳐는, 모놀리식 아키텍쳐의 단점을 보완하기 위해 만들어진 패턴으로, 최소한의 공통 모듈만을 두고, 각각의 서비스를 다른 저장소로 관리한다.</p>

<p>리포지토리를 관리하는 방법은 시스템의 각 모듈을 개별 리포지토리에서 관리할 것인지, 하나의 리포지토리에서 관리할 것인지에 따라서 달라진다. 이때 나눠서 관리하는 것을 멀티리포, 하나로 관리하는 것을 모노리포라 정의한다.</p>

<h4 id="멀티레포">멀티레포</h4>

<p>멀티레포의 장점</p>

<ol>
  <li>프로젝트의 자율성이 높다.</li>
  <li>프로젝트별로 빌드가 가능하다.</li>
  <li>프로젝트별 독립적이기에 유연하다.</li>
</ol>

<p>멀티레포의 단점</p>

<ol>
  <li>프로젝트를 새로 만들 때마다 개발 환경, 배포 환경을 구성해야 한다.</li>
  <li>코드 중복이 생긴다.</li>
  <li>프로젝트 개수가 늘어나면 점점 관리가 어려워질 수 있다.</li>
</ol>

<p>언제사용?</p>

<ol>
  <li>각 서비스가 독립적으로 관리되어야 할 때 사용합니다.</li>
  <li>팀 간 협업이 중요한 프로젝트에서 사용합니다.</li>
  <li>기술 다양성이 필요한 경우 사용합니다.</li>
</ol>

<h4 id="모노레포">모노레포</h4>

<p>모노레포의 장점</p>

<ol>
  <li>프로젝트 공통 항목을 처리하기 쉽다.</li>
  <li>새 프로젝트를 만들 때 생성 비용이 적다.</li>
  <li>프로젝트의 패키지 관리, 설정 등 통합해서 할 수 있다. (DX)</li>
  <li>멀티레포보다 의존성 관리가 우수하다.</li>
</ol>

<p>모노레포의 단점</p>

<ol>
  <li>모든 서비스가 단일 레포지토리에 있기 때문에 서비스 간의 의존성 관리가 복잡할 수 있다.</li>
  <li>여러 팀이 단일 레포지토리에서 작업할 때 충돌이 발생할 수 있다.</li>
  <li>모든 서비스가 단일 레포지토리에 있으므로 레포지토리 크기가 커질 수 있다.</li>
</ol>

<p>언제사용?</p>

<ol>
  <li>프로젝트 전체의 일관성과 코드 공유가 중요한 경우 사용합니다.</li>
  <li>통합 및 테스트가 중요한 프로젝트에서 사용합니다.</li>
  <li>배포 프로세스를 단순화하고자 할 때 사용합니다.</li>
</ol>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[모놀리식 vs 멀티레포 vs 모노레포]]></summary></entry><entry><title type="html">Bundler</title><link href="http://localhost:4000/til/bundler.html" rel="alternate" type="text/html" title="Bundler" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/bundler</id><content type="html" xml:base="http://localhost:4000/til/bundler.html"><![CDATA[<h2 id="esbuild">esbuild</h2>

<p>웹팩보다 100배 빠르다.</p>

<h3 id="build-file">build file</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//build.js</span>

<span class="k">import</span> <span class="nx">esbuild</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">esbuild</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">pkg</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./package.json</span><span class="dl">"</span> <span class="nx">assert</span> <span class="p">{</span> <span class="nl">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">json</span><span class="dl">"</span> <span class="p">};</span>

<span class="c1">// 라이브러리를 번들에 포함하지 않고 외부에 유지함으로써 번들 크기를 최적화</span>
<span class="kd">const</span> <span class="nx">external</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">({</span>
  <span class="p">...</span><span class="nx">pkg</span><span class="p">.</span><span class="nx">devDependencies</span><span class="p">,</span>
  <span class="p">...</span><span class="nx">pkg</span><span class="p">.</span><span class="nx">peerDependencies</span><span class="p">,</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">baseConfig</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">entryPoints</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">src/index.ts</span><span class="dl">"</span><span class="p">],</span>
  <span class="na">bundle</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">minify</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">sourcemap</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">outdir</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dist</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">target</span><span class="p">:</span> <span class="dl">"</span><span class="s2">es2019</span><span class="dl">"</span><span class="p">,</span>
  <span class="nx">external</span><span class="p">,</span>
<span class="p">};</span>

<span class="c1">// 디버깅, 개발시간 단축을 위해 프로덕션환경에서만 활성화 하기</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">!==</span> <span class="dl">"</span><span class="s2">production</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">baseConfig</span><span class="p">.</span><span class="nx">minify</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// mjs, cjs 병렬로 처리하기</span>
<span class="c1">// Node.js와 브라우저 환경 모두에서 호환되는 라이브러리를 개발할 때, 일반적으로 CommonJS와 ECMAScript 모듈 형식을 모두 지원하는 것이 좋다</span>
<span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
  <span class="nx">esbuild</span><span class="p">.</span><span class="nx">build</span><span class="p">({</span>
    <span class="p">...</span><span class="nx">baseConfig</span><span class="p">,</span>
    <span class="na">format</span><span class="p">:</span> <span class="dl">"</span><span class="s2">esm</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">}),</span>
  <span class="nx">esbuild</span><span class="p">.</span><span class="nx">build</span><span class="p">({</span>
    <span class="p">...</span><span class="nx">baseConfig</span><span class="p">,</span>
    <span class="na">format</span><span class="p">:</span> <span class="dl">"</span><span class="s2">cjs</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">outExtension</span><span class="p">:</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">.js</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">.cjs</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">}),</span>
<span class="p">]).</span><span class="k">catch</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Build failed</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="typescript">typescript</h3>

<p>tsconfig.json에 필요한 옵션을 설정한다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"compilerOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"outDir"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./dist"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ESNext"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"module"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ESNext"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"lib"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"ESNext"</span><span class="p">,</span><span class="w"> </span><span class="s2">"DOM"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"declaration"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"strict"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="nl">"moduleResolution"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Node"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"jsx"</span><span class="p">:</span><span class="w"> </span><span class="s2">"react-jsx"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"removeComments"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="script">script</h3>

<p>package.json 파일에서 node로 빌드 파일을 실행시켜 주면 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"scripts": {
  "build": "npm run build:ts &amp;&amp; npm run build:js",
  "build:js": "node build.js",
  "build:ts": "tsc --emitDeclarationOnly"
}
</code></pre></div></div>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[esbuild]]></summary></entry><entry><title type="html">CSS</title><link href="http://localhost:4000/til/css.html" rel="alternate" type="text/html" title="CSS" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/css</id><content type="html" xml:base="http://localhost:4000/til/css.html"><![CDATA[<h2 id="텍스트에-자연스럽게-gradient-넣기">텍스트에 자연스럽게 gradient 넣기</h2>

<ol>
  <li>
    <p>백그라운드 영역에 먼저 그라디언트를 넣어준다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> background: linear-gradient(to bottom, #194c33, #bbb); // 예시
</code></pre></div>    </div>
  </li>
  <li>
    <p>아래와 같이 속성을 넣어준다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-webkit-background-clip: text; // 텍스트 내부에만 배경 이미지를 적용하도록 지정
-webkit-text-fill-color: transparent; // 글씨 투명하게 지정
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="topright-bottom-left-한번에-처리하기">top,right, bottom, left 한번에 처리하기</h2>

<p><code class="language-plaintext highlighter-rouge">padding</code>과 <code class="language-plaintext highlighter-rouge">margin</code>과 같이 한 줄로 표현이 가능하다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// As-is
top: 0;
right: 0;
bottom: 0;
left: 0;

// To-be
inset: 0;
</code></pre></div></div>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[텍스트에 자연스럽게 gradient 넣기]]></summary></entry><entry><title type="html">DB</title><link href="http://localhost:4000/til/db.html" rel="alternate" type="text/html" title="DB" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/db</id><content type="html" xml:base="http://localhost:4000/til/db.html"><![CDATA[]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Git</title><link href="http://localhost:4000/til/git-github.html" rel="alternate" type="text/html" title="Git" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/git%20github</id><content type="html" xml:base="http://localhost:4000/til/git-github.html"><![CDATA[<h2 id="git-config-설정-확인-및-변경하기">git config 설정 확인 및 변경하기</h2>

<p>git config에 대한 리스트를 보고자 하는 경우에는 아래와 같은 커맨드를 입력한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--list</span>
</code></pre></div></div>

<p>git config 설정하는 방법 중에 가장 많이 쓰이는 것이 이름과 이메일 변경이다. 이 경우에는 아래와 같이 수정한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> user.name <span class="s2">"고양이"</span>
git config <span class="nt">--global</span> user.email <span class="s2">"hbd9425@gmail.com"</span>
</code></pre></div></div>

<p>참고로 한글이 깨지는 경우에는 아래와 같이 입력한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config <span class="nt">--global</span> core.quotepath <span class="nb">false</span>
</code></pre></div></div>

<h2 id="commit-깔끔하게-남기기">commit 깔끔하게 남기기</h2>

<p>main branch에 다른 branch를 병합할 때, 쓰이는 방법은 두 가지이다.</p>

<p>하나는 merge, 그리고 다른 하나는 rebase이다. 이 둘의 가장 큰 차이는 깔끔함에 있다.</p>

<p><img src="../assets/rebase.png" alt="Untitled" /></p>

<p>merge를 사용하면 모든 commit을 남기게 되지만, rebase를 사용하면 필요없는 commit을 생략시킬 수 있다.</p>

<p><br /></p>

<blockquote>
  <p>예제를 통해 알아보기</p>
</blockquote>

<p><br /></p>

<ol>
  <li>
    <p>첫 작업을 완료 후 아래와 같이 commit을 남겼다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .
git commit -m '테스트 추가'
</code></pre></div>    </div>
  </li>
  <li>
    <p>두 번째 작업을 완료 후 아래와 같이 commit을 남겼다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .
git commit -m '테스트 추가 2'
</code></pre></div>    </div>
  </li>
  <li>
    <p>세 번째 작업을 완료 후 아래와 같이 commit을 남겼다. 그리고 해당 작업이 끝나서 push를 해야하는 상황이다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add .
git commit -m '테스트 추가 3'
</code></pre></div>    </div>
  </li>
  <li>
    <p>commit을 정리하기 전에 git log를 통해 몇 개의 commit을 정리할지 파악한다.</p>

    <p>여러 날에 걸쳐서 작업된 경우에는 몇 개의 commit을 했는지 파악하기 힘들기 때문이다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log
</code></pre></div>    </div>
  </li>
  <li>
    <p>push 하기 전에 rebase로 불필요한 commit을 정리할 수 있다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase -i @~3

// -i는 --interactive 옵션이고 대화형으로 진행한다는 뜻이다.
// @~3은 root(최근)를 기준으로 3개의 commit을 rebase하겠다는 뜻이다.
// HEAD~3과 같은 뜻이다.
</code></pre></div>    </div>
  </li>
  <li>
    <p>rebase 편집 화면. i를 눌러 수정모드에서 7번 과정처럼 변경한다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pick 74cd541 test 추가
pick a6d2a9f test 추가 2
pick e5e93ab test 추가 3
# Rebase 83ffc92..e5e93ab onto 83ffc92
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
</code></pre></div>    </div>
  </li>
  <li>
    <p>편집을 하고 :wq로 vi를 빠져나온다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pick 74cd541 test 추가
s a6d2a9f test 추가 2   // pick -&gt; s (squash)
s e5e93ab test 추가 3   // pick -&gt; s (squash)
# Rebase 83ffc92..e5e93ab onto 83ffc92
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
</code></pre></div>    </div>
  </li>
  <li>
    <p>그 다음 vi로 commit을 수정할 수 있게 된다.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># This is a combination of 3 commits.
# This is the 1st commit message:

test 추가

# This is the commit message #2:

test 추가 2

# This is the commit message #3:

test 추가 3

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.

...
</code></pre></div>    </div>
  </li>
  <li>
    <p>최종 commit 메세지를 수정하는 것이므로 그냥 다 삭제하고, commit 메세지를 작성한다.</p>

    <p>→ shift + v로 블럭설정 모드로 들어간 뒤 shift + 커서로 모두 지정하고, dd를 눌러 삭제를 한다.</p>
  </li>
  <li>
    <p>rebase 완료</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Successfully rebased and updated refs/heads/main.
</code></pre></div>    </div>
  </li>
</ol>

<p><br /></p>

<blockquote>
  <p>간단하게</p>
</blockquote>

<p><br /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   git switch main
   git merge --squash 브랜치명
   git commit -m '메세지'
</code></pre></div></div>

<h2 id="ssh-key-생성">ssh key 생성</h2>

<p>Git 서버들은 SSH 공개키로 인증을 한다.</p>

<ol>
  <li>
    <p>SSH 공개키 확인</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~/.shh
<span class="nv">$ </span><span class="nb">ls</span>
</code></pre></div>    </div>

    <p>id_dsa 혹은 id_dsa.pub 파일이 있으면 공개키가 생성된 적이 있는 것이다. 없다면 생성을 하자.</p>

    <p>pub확장자를 가진 파일은 공개키이므로 공개되어도 괜찮지만, 다른 파일은 개인키이므로 각별히 주의하자.</p>
  </li>
  <li>
    <p>SSH 공개키 생성</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ssh-keygen
</code></pre></div>    </div>

    <p>생성할 때, 묻는 질문이 있는데 그냥 엔터를 계속 눌러서 진행하자. 그러면 생성 될 것이다.</p>

    <p>위의 커맨드를 이용해서 잘 생성되었는지 확인하고, 넘어가자.</p>
  </li>
  <li>
    <p>Git에 SSH key 등록</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>id_rsa.pub
</code></pre></div>    </div>

    <p>위의 커맨드를 이용해서 값을 복사한다.</p>

    <p>그 이후, github setting으로 들어간다.</p>

    <p>ssh and GPG keys라는 탭으로 들어가서, new ssh key 버튼을 눌러 복사한 값을 넣어주면 끝.</p>
  </li>
</ol>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[git config 설정 확인 및 변경하기]]></summary></entry><entry><title type="html">JavaScript</title><link href="http://localhost:4000/til/javascript.html" rel="alternate" type="text/html" title="JavaScript" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/javascript</id><content type="html" xml:base="http://localhost:4000/til/javascript.html"><![CDATA[<h2 id="호이스팅">호이스팅</h2>

<p>호이스팅(Hoisting)이란, var 선언문이나 function 선언문 등을 해당 스코프의 선두로 옮긴 것처럼 동작하는 특성을 말한다.</p>

<p>자바스크립트는 ES6에서 도입된 let, const를 포함하여 모든 선언(var, let, const, function, function*, class)을 호이스팅한다.</p>

<p><br /></p>

<p>아래는 가장 대표적인 예시이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// undefined</span>

<span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p>선언하지 않은 것인데도 에러가 발생하지 않는다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">helloWorld</span><span class="p">();</span> <span class="c1">// Hello World!</span>

<span class="kd">function</span> <span class="nx">helloWorld</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello World!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>선언을 하지도 않았는데 함수에 접근할 수 있다.</p>

<p><br /></p>

<p><b>왜 그런 것일까??</b></p>

<p>자바스크립트에서의 변수는 <code class="language-plaintext highlighter-rouge">선언 단계</code> &gt; <code class="language-plaintext highlighter-rouge">초기화 단계</code>&gt; <code class="language-plaintext highlighter-rouge">할당 단계</code>에 걸쳐 생성되는데 컴파일 단계에서 함수와 변수 선언이 스캔된다.</p>

<p><br /></p>

<p>스캔 된 모든 함수, 변수 선언은 <code class="language-plaintext highlighter-rouge">Lexical Environment</code>라고 불리는 자바스크립트 데이터 구조 내 메모리에 추가된다.</p>

<p>(이때가 스코프의 선두로 옮긴 것처럼 동작하게끔 보이는 것이고 접근 가능케 되는 것이다. )</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c1">// ReferenceError</span>

<span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
</code></pre></div></div>

<p>가끔 다른 블로그를 보면 <code class="language-plaintext highlighter-rouge">let</code> 과 <code class="language-plaintext highlighter-rouge">const</code>가 호이스팅이 안된다고 말하는 사람들이 있는데 그것은 잘못 된 것이다.</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">var</code>는 선언 단계와 초기화 단계가 한번에 이루어진다. 그래서 <code class="language-plaintext highlighter-rouge">undefined</code>가 찍히는 것이다.</p>

<p>반면,<code class="language-plaintext highlighter-rouge">let</code>과 <code class="language-plaintext highlighter-rouge">const</code>는 호이스팅이 되어 선언단계까지는 왔으나 초기화 단계가 없어서 에러를 뱉는 것이다.</p>

<p>위의 주석처리를 보면 이제 이해가 갈 것이다. 이때를 <code class="language-plaintext highlighter-rouge">일시적 사각지대(Temporal Dead Zone; TDZ)</code>에 빠진다고 생각하면 된다.</p>

<h2 id="클로저">클로저</h2>

<p>클로저를 쉽게 이해하기 위해서는 배경지식이 필요하다.</p>

<p>먼저, <code class="language-plaintext highlighter-rouge">실행 컨텍스트</code>를 알아야한다.</p>

<p>함수는 호출 될 때 함수의 실행 컨텍스트가 생성됐다가 실행이 끝나면 실행 컨텍스트가 종료된다.</p>

<p>이때 실행 컨텍스트의 <code class="language-plaintext highlighter-rouge">lexical environment</code>에는 함수의 지역 변수의 정보와 이 함수의 상위 스코프의 대한 정보가 들어있다. (<code class="language-plaintext highlighter-rouge">scope chain</code>)</p>

<p><br /></p>

<p><b>클로저란?</b></p>

<p>함수가 생성 될 때 주변 환경의 상태를 기억하여(lexical environment) 나중에 호출될 때 그 값에 접근할 수 있는 것을 말한다.</p>

<p>예제를 보자면,</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">makeCounter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">inner</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">inner</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="nx">makeCounter</span><span class="p">();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">());</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">());</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">());</span> <span class="c1">// 3</span>
</code></pre></div></div>

<p>이 코드에서 makeCounter 함수는 inner 함수를 정의하고, 이를 반환한다.</p>

<p>inner 함수는 외부 함수인 makeCounter 함수 내에 정의되어 있지만, 외부 변수인 count에 접근할 수 있다.</p>

<p>이렇게 반환된 inner 함수가 클로저이다.</p>

<p>이제 counter 변수에는 inner 함수가 할당되어 있고, 이를 호출할 때마다 count 변수가 증가한다.</p>

<p><br /></p>

<p><b>정리</b></p>

<p>클로저 (Closure) 함수는 외부 함수 밖에서 내부 함수가 호출 되더라도 외부 함수의 지역 변수에 접근할 수 있다 그 이유는 자신이 생성될 때의 환경 즉, Lexical Environment을 기억하고 있기 때문이다.</p>

<h2 id="이벤트-루프">이벤트 루프</h2>

<p>JavaScript는 단일 스레드 프로그래밍 언어이다. 즉, 단일 호출 스택이 있음을 의미한다.
그러므로 한 번에 한 가지 일만 할 수 있다.</p>

<p><img src="../assets/event.png" alt="Untitled" /></p>

<p>JavaScript는 크게 <code class="language-plaintext highlighter-rouge">Memory Heap</code>과 <code class="language-plaintext highlighter-rouge">Call Stack</code>으로 이루어져 있다.</p>

<ul>
  <li>Memory Heap : 메모리 할당이 일어나는 장소</li>
  <li>Call Stack : 코드가 실행될 경우 하나씩 stack의 형태로 쌓이는 장소</li>
</ul>

<p><br /></p>

<p>Call Stack에서 실행된 비동기 함수는 <code class="language-plaintext highlighter-rouge">Web API</code>에서 처리를 하게 되고, 그동안에 Call Stack은 나머지 동기 함수들을 처리하게 된다.</p>

<p><br /></p>

<p>Web API는 브라우저(Chrome)에서 멀티 스레드로 구현되어 있다. 그래서 브라우저는 비동기 작업에 대해 메인 스레드를 차단하지 않고, 다른 스레드를 사용하여 동시에 처리할수 있는 것이다. (DOM, AJAX, setTimeout 등)</p>

<p>작업이 완료된 비동기 함수들을 <code class="language-plaintext highlighter-rouge">Callback Queue</code>로 넘겨주게 된다.</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">Event Loop</code>는 Call Stack과 Callback Queue를 상태를 계속 감시하며 Call Stack에 함수들이 존재하지 않는다면 Callback Queue에 있는 비동기 함수들을 Call Stack에 밀어 넣게 된다.</p>

<p>그 후 Call Stack에서 비동기 함수를 실행시키게 된다.</p>

<p><br /></p>

<p>참고 : https://inpa.tistory.com/entry/%F0%9F%94%84-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EA%B5%AC%EC%A1%B0-%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AC</p>

<p>참고 : https://blog.toktokhan.dev/t-767eb0fa38f3</p>

<hr />

<h2 id="nullish-coalescing">Nullish coalescing</h2>

<ul>
  <li>값이 null 이나 undefined 인지 체크</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">displayName</span> <span class="o">=</span> <span class="nx">name</span> <span class="o">??</span> <span class="dl">"</span><span class="s2">익명</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="메서드">메서드</h2>

<h3 id="for-in">for in</h3>

<ul>
  <li>객체 순환</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">object</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="na">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="na">c</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
<span class="p">};</span>

<span class="c1">// key 값 접근</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="c1">// a,b,c</span>
<span class="p">}</span>

<span class="c1">// value 값 접근</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">object</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">object</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span> <span class="c1">// 1,2,3</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="for-of">for of</h3>

<ul>
  <li>배열 순환</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">value</span> <span class="k">of</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 1,2,3</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="foreach">forEach</h3>

<ul>
  <li>배열 순환</li>
  <li>return 값 X</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="nx">array</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">value</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">));</span> <span class="c1">// 1,2,3</span>
</code></pre></div></div>

<h3 id="map">map</h3>

<ul>
  <li>배열 순환</li>
  <li>return 값이 변형된 값(return값)들의 모음</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">double</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">item</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">double</span><span class="p">);</span> <span class="c1">// [1,2,3]</span>
</code></pre></div></div>

<h3 id="filter">filter</h3>

<ul>
  <li>배열 순환</li>
  <li>return 값이 true인 값들의 모음</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

<span class="kd">let</span> <span class="nx">odd</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">item</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">odd</span><span class="p">);</span> <span class="c1">// [1,3]</span>
</code></pre></div></div>

<h3 id="reduce">reduce</h3>

<ul>
  <li>배열 순환</li>
  <li>callback함수의 실행 값을 누적하여 하나의 결과값을 반환</li>
  <li>초기값 설정 필요 (설정하지 않으면 배열 0번째 요소의 값)</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">];</span>

<span class="kd">const</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">acc</span> <span class="o">+</span> <span class="nx">curr</span><span class="p">;</span>
<span class="p">},</span> <span class="mi">0</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sum</span><span class="p">);</span> <span class="c1">// 55</span>
</code></pre></div></div>

<h3 id="split">split</h3>

<ul>
  <li>문자열을 구분자 기준으로 나누어 배열로 변환</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">apple banana orange</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">"</span><span class="s2"> </span><span class="dl">"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span> <span class="c1">// [ 'apple', 'banana', 'orange' ]</span>
</code></pre></div></div>

<h3 id="join">join</h3>

<ul>
  <li>배열의 모든 요소를 쉼표나 지정된 구분 문자열로 구분하여 연결한 새 문자열을 만들어 반환</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">elements</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Fire</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Air</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Water</span><span class="dl">"</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elements</span><span class="p">.</span><span class="nx">join</span><span class="p">());</span> <span class="c1">//  Fire,Air,Water</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elements</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">""</span><span class="p">));</span> <span class="c1">// FireAirWater</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">elements</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">-</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Fire-Air-Water</span>
</code></pre></div></div>

<h3 id="tosorted">toSorted</h3>

<ul>
  <li>요소들을 오름차순으로 정렬한 새로운 배열을 반환</li>
</ul>

<h3 id="toreversed">toReversed</h3>

<ul>
  <li>요소들을 내림차순으로 정렬한 새로운 배열을 반환</li>
</ul>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[호이스팅]]></summary></entry><entry><title type="html">네트워크</title><link href="http://localhost:4000/til/network.html" rel="alternate" type="text/html" title="네트워크" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/network</id><content type="html" xml:base="http://localhost:4000/til/network.html"><![CDATA[<h2 id="rest-api란-무엇인가">REST API란 무엇인가?</h2>

<p>REST API란 REST를 기반으로 만들어진 API를 의미한다. REST API를 알기 위해 REST부터 알아야 한다.</p>

<h3 id="rest">REST</h3>

<p>REST(Representational State Transfer)의 약자로 자원을 이름으로 구분하여 해당 자원의 상태를 주고받는 모든 것을 의미.</p>

<p>HTTP URI를 통해 자원을 명시하고, HTTP Method (POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD OPERATION을 적용하는 것을 의미한다.</p>

<p><br /></p>

<blockquote>
  <p>참고 : PUT vs PATCH</p>
</blockquote>

<ul>
  <li>PUT : 리소스의 모든 것을 업데이트 한다. 덮어씌운다는 느낌. 보내지 않은 데이터는 null로 반환.</li>
  <li>PATCH : 리소스의 일부를 업데이트 한다. 일부를 수정하는 느낌. 보낸 데이터만 수정됨.</li>
</ul>

<blockquote>
  <p>참고 : Get은 왜 body에 데이터를 넣으면 안될까?</p>
</blockquote>

<ul>
  <li>GET 요청은 서버에서 리소스를 검색하기 위해 설계되었다.</li>
  <li>HTTP 명세서에서 GET 요청에서 메시지 바디를 사용하지 않는 것은 캐시 및 보안 문제를 일으킬 수 있기 때문이다.</li>
</ul>

<h3 id="rest-api">REST API</h3>

<p>REST의 원리를 따르는 API.</p>

<ol>
  <li>URL은 동사보다는 명사, 대문자보다는 소문자를 사용한다.</li>
  <li>슬래시(/)는 계층 관계를 나타내는데 사용한다.</li>
  <li>마지막은 슬래시(/)를 포함하지 않는다.</li>
  <li>언더바(_)대신 하이픈(-)을 사용한다.</li>
  <li>파일확장자는 URL에 포함하지 않는다.</li>
</ol>

<p>또한, REST API는 URI만 잘 설계된 것이 아닌 그 리소스에 대한 응답을 잘 내어주는 것까지 포함되어야 한다.</p>

<p><br /></p>

<blockquote>
  <p>자주 사용되는 상태코드</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th style="text-align: center">상태코드</th>
      <th style="text-align: center">상태</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">200</td>
      <td style="text-align: center">OK</td>
      <td>서버가 요청을 성공적으로 처리하였다.</td>
    </tr>
    <tr>
      <td style="text-align: center">201</td>
      <td style="text-align: center">Created</td>
      <td>요청이 처리되어서 새로운 리소스가 생성되었다.</td>
    </tr>
    <tr>
      <td style="text-align: center">202</td>
      <td style="text-align: center">Accepted</td>
      <td>요청은 접수하였지만, 처리가 완료되지 않았다.</td>
    </tr>
    <tr>
      <td style="text-align: center">400</td>
      <td style="text-align: center">Bad Request</td>
      <td>잘못된 요청으로 서버가 요청사항을 이해하지 못했다.</td>
    </tr>
    <tr>
      <td style="text-align: center">401</td>
      <td style="text-align: center">Unauthorized</td>
      <td>지정한 리소스에 대한 액세스 권한이 없다.</td>
    </tr>
    <tr>
      <td style="text-align: center">403</td>
      <td style="text-align: center">Forbidden</td>
      <td>지정한 리소스에 대한 액세스가 금지되었다.</td>
    </tr>
    <tr>
      <td style="text-align: center">404</td>
      <td style="text-align: center">Not Found</td>
      <td>지정한 리소스를 찾을 수 없다.</td>
    </tr>
    <tr>
      <td style="text-align: center">500</td>
      <td style="text-align: center">Internal Server Error</td>
      <td>서버에 에러가 발생하였다.</td>
    </tr>
    <tr>
      <td style="text-align: center">501</td>
      <td style="text-align: center">Not Implemented</td>
      <td>요청한 URI의 메소드에 대해 서버가 구현하고 있지 않다.</td>
    </tr>
    <tr>
      <td style="text-align: center">502</td>
      <td style="text-align: center">Bad Gateway</td>
      <td>웹서버가 다른 서버로부터의 잘못된 응답을 받았을 때 발생한다.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<blockquote>
  <p>참고 : 4xx vs 5xx</p>
</blockquote>

<ul>
  <li>4xx : 클라이언트 에러</li>
  <li>5xx : 서버 에러</li>
</ul>

<h3 id="restful">RESTful</h3>

<p>REST API의 모든 설계 규칙을 올바르게 지킨 시스템을 <code class="language-plaintext highlighter-rouge">RESTful하다</code> 라고 한다.</p>

<hr />

<p><a href="https://khj93.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-REST-API%EB%9E%80-REST-RESTful%EC%9D%B4%EB%9E%80">REST API란</a></p>

<p><a href="https://velog.io/@somday/RESTful-API-%EC%9D%B4%EB%9E%80">RESTful API란</a></p>

<p><a href="https://meetup.nhncloud.com/posts/92">REST API 제대로 알고 사용하기</a></p>

<p><a href="https://hongong.hanbit.co.kr/http-%EC%83%81%ED%83%9C-%EC%BD%94%EB%93%9C-%ED%91%9C-1xx-5xx-%EC%A0%84%EC%B2%B4-%EC%9A%94%EC%95%BD-%EC%A0%95%EB%A6%AC/">http 상태코드</a></p>

<p><a href="https://youtu.be/7LbylTMlj8M?si=3sIqGqs1GyTF_aLE">제대로 이해하는 REST API</a></p>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[REST API란 무엇인가?]]></summary></entry><entry><title type="html">Next.js</title><link href="http://localhost:4000/til/next.html" rel="alternate" type="text/html" title="Next.js" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/next</id><content type="html" xml:base="http://localhost:4000/til/next.html"><![CDATA[<h2 id="nextjs를-사용해야-하는-이유">Next.js를 사용해야 하는 이유</h2>

<ol>
  <li>폴더를 사용하여 페이지를 간단하게 만들 수 있다.
    <ul>
      <li>리액트의 경우, <code class="language-plaintext highlighter-rouge">react-router-dom</code>을 사용하여 하나하나 만들어줘야 함</li>
    </ul>
  </li>
  <li>자체 api를 생성할 수 있다.</li>
  <li>SSR과 CSR을 함께 사용 할 수 있다.</li>
  <li>최적화가 잘 되어 있다.
    <ul>
      <li>코드 분할, 이미지 최적화 등 추가적인 작업을 안해도 되서 편하다.</li>
    </ul>
  </li>
  <li>리액트 팀에서도 next.js 프레임워크를 사용하기를 권장한다.</li>
</ol>

<p><br /></p>

<blockquote>
  <p>런타임 에러</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(node:29569) [DEP0040] DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.
(Use `node --trace-deprecation ...` to show where the warning was created)
</code></pre></div></div>

<p><br /></p>

<blockquote>
  <p>해결책</p>
</blockquote>

<p>nvm을 사용하여, node 18버전으로 다운그레이드</p>

<h2 id="라우팅">라우팅</h2>

<ol>
  <li>app폴더 하위 폴더에 라우팅하고 싶은 페이지명을 폴더명으로 만든다.</li>
  <li>그 폴더에는 page.js로 파일을 만든다.
    <ul>
      <li>동적라우팅의 경우 [id] 와 같이 대괄호 안에 넣어준다.</li>
      <li>그룹화 하고 싶은 경우 (auth) 와 같이 소괄호 안에 넣어준다. 이때 라우팅에서 그룹화 부분은 무시된다.</li>
    </ul>
  </li>
</ol>

<h2 id="이미지">이미지</h2>

<p>이미지 가져오는 방법은 3가지가 있다.</p>

<ol>
  <li>폴더안에 파일의 경로를 넣는 경우
    <ul>
      <li>너비와 높이를 지정해야한다.</li>
    </ul>
  </li>
  <li>폴더안에 파일을 import 해서 넣는 경우
    <ul>
      <li>너비와 높이를 지정하지 않아도 된다.</li>
    </ul>
  </li>
  <li>외부 경로를 넣는 경우
    <ul>
      <li>너비와 높이를 지정해야한다.</li>
      <li>next.js에서는 기본적으로 외부 이미지를 허용하지 않는다.</li>
      <li>사용하려면 해당 이미지의 도메인을 적어주어야 한다.</li>
    </ul>
  </li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// next.config.js</span>

<span class="kd">const</span> <span class="nx">nextConfig</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">images</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">domains</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">example.com</span><span class="dl">"</span><span class="p">],</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">nextConfig</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>blur</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   placeholder="blur"
</code></pre></div></div>

<h2 id="api">API</h2>

<ol>
  <li>app폴더 하위 폴더에 api 폴더를 만들고, 라우팅하고 싶은 api를 폴더명으로 만든다.</li>
  <li>그 폴더에는 route.js로 파일을 만든다.
    <ul>
      <li>동적라우팅의 경우 [id] 와 같이 대괄호 안에 넣어준다.</li>
    </ul>
  </li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">NextResponse</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/server</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">GET</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">res</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>

  <span class="k">try</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">connect</span><span class="p">();</span>

    <span class="kd">const</span> <span class="nx">post</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Post</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nx">NextResponse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">post</span><span class="p">),</span> <span class="p">{</span>
      <span class="na">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nx">NextResponse</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">status</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<blockquote>
  <p>params 가져오기</p>
</blockquote>

<p>Next.js의 API 라우트에서는 요청 객체가 res 매개변수를 통해 전달된다. 따라서 API 라우트에서는 res.params를 사용하여 경로 매개변수를 가져와야 한다.</p>

<h2 id="metadata">Metadata</h2>

<p>각 페이지에 해당 객체를 입력만 해도 간단하게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">metadata</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">parklego</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">description</span><span class="p">:</span> <span class="dl">"</span><span class="s2">parklego next tutorial</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p>동적 페이지 경우에는 아래와 같이 생성하면 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">generateMetadata</span> <span class="o">=</span> <span class="k">async</span> <span class="p">({</span> <span class="nx">params</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">post</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getData</span><span class="p">(</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="na">title</span><span class="p">:</span> <span class="nx">post</span><span class="p">.</span><span class="nx">title</span><span class="p">,</span> <span class="c1">// params someting..</span>
    <span class="na">description</span><span class="p">:</span> <span class="nx">post</span><span class="p">.</span><span class="nx">desc</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">};</span>
</code></pre></div></div>

<h2 id="next-auth-authjs">Next-auth (Auth.js)</h2>

<p><a href="https://authjs.dev/getting-started/providers/oauth-tutorial">OAuth authentication</a></p>

<ol>
  <li>
    <p>핸들러 함수를 정의</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// pages/api/auth/[...nextauth].js</span>

<span class="kd">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="nx">NextAuth</span><span class="p">({</span>
  <span class="na">providers</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">GoogleProvider</span><span class="p">({</span>
      <span class="na">clientId</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GOOGLE_CLIENT_ID</span><span class="p">,</span>
      <span class="na">clientSecret</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GOOGLE_CLIENT_SECRET</span><span class="p">,</span>
    <span class="p">}),</span>
  <span class="p">],</span>
<span class="p">});</span>

<span class="k">export</span> <span class="p">{</span> <span class="nx">handler</span> <span class="k">as</span> <span class="nx">GET</span><span class="p">,</span> <span class="nx">handler</span> <span class="k">as</span> <span class="nx">POST</span> <span class="p">};</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>.env 파일에서 변수를 추가한다.</p>

    <pre><code class="language-env">...
NEXTAUTH_SECRET = 'next-tutorial'
NEXTAUTH_URL='https:localhost:3000'
...

</code></pre>
  </li>
  <li>
    <p>layout.js 에서 provider로 감싸준다.
(provider는 서버 컴포넌트에서 사용못하므로 따로 빼주어야 한다.)</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">use client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">SessionProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next-auth/react</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">AuthProvider</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">children</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">SessionProvider</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">children</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">SessionProvider</span><span class="p">&gt;;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">AuthProvider</span><span class="p">;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>로그인</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">signIn</span><span class="p">,</span> <span class="nx">useSession</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next-auth/react</span><span class="dl">"</span><span class="p">;</span>

<span class="p">...</span>

<span class="kd">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="nx">useSession</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">useRouter</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">loading</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
 <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>loading..<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span> <span class="c1">// spinner</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">authenticated</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">/dashboard</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="p">...</span>
<span class="k">return</span> <span class="p">(</span>
 <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">signIn</span><span class="p">(</span><span class="dl">"</span><span class="s2">google</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span><span class="p">&gt;</span>login with google<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">)</span>

</code></pre></div>    </div>
  </li>
  <li>
    <p>로그아웃</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">signOut</span><span class="p">,</span> <span class="nx">useSession</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next-auth/react</span><span class="dl">"</span><span class="p">;</span>

<span class="p">...</span>

<span class="p">{</span>
 <span class="nx">session</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">authenticated</span><span class="dl">"</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
     <span class="p">&lt;</span><span class="nt">button</span> <span class="na">onClick</span><span class="p">=</span><span class="si">{</span><span class="nx">signOut</span><span class="si">}</span><span class="p">&gt;</span>logout<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
 <span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>protected 페이지</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">...</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">loading</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>loading..<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">unauthenticated</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">router</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">/dashboard/login</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">authenticated</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// someting ..</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="스트리밍">스트리밍</h2>

<ol>
  <li>전체 스트리밍
    <ul>
      <li>loading.jsx 파일을 만들면 된다. 이 로딩은 같은 폴더 내 다른 페이지에도 영향을 끼친다.</li>
      <li>그래서 로딩 스켈레톤을 만들려면 라우트를 그룹화 하여 만들면 된다.</li>
    </ul>
  </li>
  <li>
    <p>구성요소 스트리밍</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Suspense</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>

 <span class="p">...</span>
 <span class="k">return</span> <span class="p">(</span>
     <span class="p">&lt;&gt;</span>
       <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
         <span class="p">&lt;</span><span class="nc">Suspense</span> <span class="na">fallback</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">CardsSkeleton</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">&gt;</span>
           <span class="p">&lt;</span><span class="nc">CardWrapper</span> <span class="p">/&gt;</span>
         <span class="p">&lt;/</span><span class="nc">Suspense</span><span class="p">&gt;</span>
       <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
       <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
         <span class="p">&lt;</span><span class="nc">Suspense</span> <span class="na">fallback</span><span class="p">=</span><span class="si">{</span><span class="p">&lt;</span><span class="nc">RevenueChartSkeleton</span> <span class="p">/&gt;</span><span class="si">}</span><span class="p">&gt;</span>
           <span class="p">&lt;</span><span class="nc">RevenueChart</span> <span class="p">/&gt;</span>
         <span class="p">&lt;/</span><span class="nc">Suspense</span><span class="p">&gt;</span>
       <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
     <span class="p">&lt;/&gt;</span>
 <span class="p">)</span>

</code></pre></div>    </div>
  </li>
</ol>

<h2 id="error">Error</h2>

<ol>
  <li>error.jsx는 모든 오류를 처리하는 페이지이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">use client</code> 사용</li>
    </ul>
  </li>
  <li>
    <p>not-found.jsx 페이지가 error.jsx 페이지보다 우선 순위가 높다.</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">notFound</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/navigation</span><span class="dl">'</span><span class="p">;</span>

<span class="p">...</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">invoice</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">notFound</span><span class="p">();</span>
<span class="p">}</span>

<span class="p">...</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="접근성-향상">접근성 향상</h2>

<p>기본적으로 <code class="language-plaintext highlighter-rouge">eslint-plugin-jsx-a11y</code>라는 플러그인이 포함되어 있다.
이미지태그에서 alt가 빠진 경우나, aria-* 및 role 속성을 잘못 사용하는 경우 등을 경고해준다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="dl">"</span><span class="s2">lint</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">next lint</span><span class="dl">"</span>
<span class="p">},</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run lint
</code></pre></div></div>

<h2 id="deploy">Deploy</h2>

<p>Vercel로 간단하게 프로젝트를 배포할 수 있다. 놀라웠던 점은 Git 저장소를 연결하고 특정 브랜치에 변경 사항이 푸시되면 자동으로 배포를 하더라.
그리고 무중단 배포를 하기때문에 걱정도 덜하다.</p>

<p><a href="https://vercel.com/">vercel.com</a></p>

<hr />

<p><a href="https://nextjs.org/learn?utm_source=next-site&amp;utm_medium=homepage-cta&amp;utm_campaign=home">next.js learn</a>
<a href="https://youtu.be/VE8BkImUciY?si=0PfRB52RXLW6H9PS">next.js tutorial</a></p>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[Next.js를 사용해야 하는 이유]]></summary></entry><entry><title type="html">React-query</title><link href="http://localhost:4000/til/react-query.html" rel="alternate" type="text/html" title="React-query" /><published>2024-03-01T00:00:00+09:00</published><updated>2024-03-01T00:00:00+09:00</updated><id>http://localhost:4000/til/react-query</id><content type="html" xml:base="http://localhost:4000/til/react-query.html"><![CDATA[<h2 id="환경설정">환경설정</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">QueryClient</span><span class="p">,</span> <span class="nx">QueryClientProvider</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-query</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueryClient</span><span class="p">({</span>
  <span class="na">defaultOptions</span><span class="p">:</span> <span class="p">{},</span>
<span class="p">});</span>

<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">createRoot</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">)</span><span class="o">!</span><span class="p">).</span><span class="nx">render</span><span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">React</span><span class="p">.</span><span class="nc">StrictMode</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nc">QueryClientProvider</span> <span class="na">client</span><span class="p">=</span><span class="si">{</span><span class="nx">client</span><span class="si">}</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">App</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nc">QueryClientProvider</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nc">React</span><span class="p">.</span><span class="nc">StrictMode</span><span class="p">&gt;</span>
<span class="p">);</span>

</code></pre></div></div>

<h2 id="usequery">useQuery</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">isLoading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useQuery</span><span class="p">(</span><span class="nx">queryKey</span><span class="p">,</span> <span class="nx">queryFn</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>
    <p>queryKey</p>

    <p>키값에 따라 데이터를 캐싱처리 한다.</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 문자열</span>
<span class="nx">useQuery</span><span class="p">(</span><span class="dl">'</span><span class="s1">todos</span><span class="dl">'</span><span class="p">,</span> <span class="p">...)</span>

<span class="c1">// 배열</span>
<span class="nx">useQuery</span><span class="p">([</span><span class="dl">'</span><span class="s1">todos</span><span class="dl">'</span><span class="p">],</span> <span class="p">...)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>queryFn</p>

    <p>fetching 함수를 넘기면 된다.</p>

    <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useQuery</span><span class="p">([</span><span class="dl">"</span><span class="s2">todos</span><span class="dl">"</span><span class="p">],</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">somethingfetching</span><span class="p">()</span> <span class="p">));</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<p>도움되는 링크</p>

<p>https://github.com/ssi02014/react-query-tutorial</p>]]></content><author><name>parklego</name></author><category term="til" /><summary type="html"><![CDATA[환경설정]]></summary></entry></feed>